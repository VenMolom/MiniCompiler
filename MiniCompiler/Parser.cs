// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-4T5HHDR
// DateTime: 2021-06-09 22:53:50
// UserName: Molom
// Input file <Parser.y - 2021-06-09 22:53:28>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace MiniCompiler
{
public enum Tokens {error=2,EOF=3,Program=4,If=5,Else=6,
    While=7,Read=8,Write=9,Return=10,Int=11,Double=12,
    Bool=13,True=14,False=15,Hex=16,Assign=17,Or=18,
    And=19,BitOr=20,BitAnd=21,Equal=22,NotEqual=23,Less=24,
    LessEqual=25,Greater=26,GreaterEqual=27,Plus=28,Minus=29,Multiply=30,
    Divide=31,Negate=32,BitNegate=33,OpenPar=34,ClosePar=35,OpenBlock=36,
    CloseBlock=37,Comma=38,Endline=39,Eof=40,Ident=41,IntNumber=42,
    DoubleNumber=43,String=44,Error=45};

public struct ValueType
#line 6 "Parser.y"
       {
    public string val;
    public TypeEnum type;
    public Exp exp;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[33];
  private static State[] states = new State[48];
  private static string[] nonTerms = new string[] {
      "type", "declaration", "exp", "number", "start", "$accept", "programContent", 
      "declarations", "instructions", "Anon@1", "identifiers", "instruction", 
      "expression_instruction", "output_instruction", };

  static Parser() {
    states[0] = new State(new int[]{4,3,2,46},new int[]{-5,1});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{36,4});
    states[4] = new State(new int[]{11,41,12,42,13,43,41,14,42,18,43,19,14,20,15,21,9,23,2,29,40,31},new int[]{-7,5,-8,8,-2,44,-1,34,-9,45,-12,33,-13,11,-3,12,-4,17,-14,22});
    states[5] = new State(new int[]{37,6});
    states[6] = new State(new int[]{40,7});
    states[7] = new State(-2);
    states[8] = new State(new int[]{41,14,42,18,43,19,14,20,15,21,9,23,2,29,40,31,11,41,12,42,13,43,37,-5},new int[]{-9,9,-2,32,-12,33,-13,11,-3,12,-4,17,-14,22,-1,34});
    states[9] = new State(new int[]{41,14,42,18,43,19,14,20,15,21,9,23,2,29,40,31,37,-4},new int[]{-12,10,-13,11,-3,12,-4,17,-14,22});
    states[10] = new State(-16);
    states[11] = new State(-18);
    states[12] = new State(new int[]{39,13});
    states[13] = new State(-23);
    states[14] = new State(new int[]{17,15,39,-25,38,-25});
    states[15] = new State(new int[]{41,14,42,18,43,19,14,20,15,21},new int[]{-3,16,-4,17});
    states[16] = new State(-24);
    states[17] = new State(-26);
    states[18] = new State(-27);
    states[19] = new State(-28);
    states[20] = new State(-29);
    states[21] = new State(-30);
    states[22] = new State(-19);
    states[23] = new State(new int[]{41,14,42,18,43,19,14,20,15,21},new int[]{-3,24,-4,17});
    states[24] = new State(new int[]{39,25,38,26});
    states[25] = new State(-31);
    states[26] = new State(new int[]{16,27});
    states[27] = new State(new int[]{39,28});
    states[28] = new State(-32);
    states[29] = new State(new int[]{39,30,41,-21,42,-21,43,-21,14,-21,15,-21,9,-21,2,-21,40,-21,37,-21});
    states[30] = new State(-20);
    states[31] = new State(-22);
    states[32] = new State(-7);
    states[33] = new State(-17);
    states[34] = new State(-9,new int[]{-10,35});
    states[35] = new State(new int[]{41,40},new int[]{-11,36});
    states[36] = new State(new int[]{39,37,38,38});
    states[37] = new State(-10);
    states[38] = new State(new int[]{41,39});
    states[39] = new State(-14);
    states[40] = new State(-15);
    states[41] = new State(-11);
    states[42] = new State(-12);
    states[43] = new State(-13);
    states[44] = new State(-8);
    states[45] = new State(new int[]{41,14,42,18,43,19,14,20,15,21,9,23,2,29,40,31,37,-6},new int[]{-12,10,-13,11,-3,12,-4,17,-14,22});
    states[46] = new State(new int[]{40,47});
    states[47] = new State(-3);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-6, new int[]{-5,3});
    rules[2] = new Rule(-5, new int[]{4,36,-7,37,40});
    rules[3] = new Rule(-5, new int[]{2,40});
    rules[4] = new Rule(-7, new int[]{-8,-9});
    rules[5] = new Rule(-7, new int[]{-8});
    rules[6] = new Rule(-7, new int[]{-9});
    rules[7] = new Rule(-8, new int[]{-8,-2});
    rules[8] = new Rule(-8, new int[]{-2});
    rules[9] = new Rule(-10, new int[]{});
    rules[10] = new Rule(-2, new int[]{-1,-10,-11,39});
    rules[11] = new Rule(-1, new int[]{11});
    rules[12] = new Rule(-1, new int[]{12});
    rules[13] = new Rule(-1, new int[]{13});
    rules[14] = new Rule(-11, new int[]{-11,38,41});
    rules[15] = new Rule(-11, new int[]{41});
    rules[16] = new Rule(-9, new int[]{-9,-12});
    rules[17] = new Rule(-9, new int[]{-12});
    rules[18] = new Rule(-12, new int[]{-13});
    rules[19] = new Rule(-12, new int[]{-14});
    rules[20] = new Rule(-12, new int[]{2,39});
    rules[21] = new Rule(-12, new int[]{2});
    rules[22] = new Rule(-12, new int[]{40});
    rules[23] = new Rule(-13, new int[]{-3,39});
    rules[24] = new Rule(-3, new int[]{41,17,-3});
    rules[25] = new Rule(-3, new int[]{41});
    rules[26] = new Rule(-3, new int[]{-4});
    rules[27] = new Rule(-4, new int[]{42});
    rules[28] = new Rule(-4, new int[]{43});
    rules[29] = new Rule(-4, new int[]{14});
    rules[30] = new Rule(-4, new int[]{15});
    rules[31] = new Rule(-14, new int[]{9,-3,39});
    rules[32] = new Rule(-14, new int[]{9,-3,38,16,39});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // start -> Program, OpenBlock, programContent, CloseBlock, Eof
#line 24 "Parser.y"
        {
            YYAccept();
        }
#line default
        break;
      case 3: // start -> error, Eof
#line 28 "Parser.y"
        {
            Error(LocationStack[LocationStack.Depth-2]);
            yyerrok();
            YYAccept();
        }
#line default
        break;
      case 9: // Anon@1 -> /* empty */
#line 48 "Parser.y"
        {
            identifiersType = ValueStack[ValueStack.Depth-1].type;
        }
#line default
        break;
      case 11: // type -> Int
#line 56 "Parser.y"
        { CurrentSemanticValue.type = TypeEnum.Int; }
#line default
        break;
      case 12: // type -> Double
#line 58 "Parser.y"
        { CurrentSemanticValue.type = TypeEnum.Double; }
#line default
        break;
      case 13: // type -> Bool
#line 60 "Parser.y"
        { CurrentSemanticValue.type = TypeEnum.Bool; }
#line default
        break;
      case 14: // identifiers -> identifiers, Comma, Ident
#line 65 "Parser.y"
        { Declare(ValueStack[ValueStack.Depth-1].val, identifiersType, LocationStack[LocationStack.Depth-1]); }
#line default
        break;
      case 15: // identifiers -> Ident
#line 67 "Parser.y"
        { Declare(ValueStack[ValueStack.Depth-1].val, identifiersType, LocationStack[LocationStack.Depth-1]); }
#line default
        break;
      case 20: // instruction -> error, Endline
#line 79 "Parser.y"
        {
            Error(LocationStack[LocationStack.Depth-2]);
            yyerrok();
        }
#line default
        break;
      case 21: // instruction -> error
#line 84 "Parser.y"
        {
            Error(LocationStack[LocationStack.Depth-1]);
            yyerrok();
        }
#line default
        break;
      case 22: // instruction -> Eof
#line 89 "Parser.y"
        {
            Error(LocationStack[LocationStack.Depth-1], "syntax error - unexpected end of file");
            YYAccept();
        }
#line default
        break;
      case 24: // exp -> Ident, Assign, exp
#line 101 "Parser.y"
        {
            var typeNullable = GetIdentifierType(ValueStack[ValueStack.Depth-3].val, LocationStack[LocationStack.Depth-3]);
            if (!typeNullable.HasValue) { return; }
            
            var type = typeNullable.Value;
            if (type == TypeEnum.Double && ValueStack[ValueStack.Depth-1].exp.Type == TypeEnum.Bool)
            {
                Error(LocationStack[LocationStack.Depth-1], "cannot assign bool to double");
                return;
            }
            if (type == TypeEnum.Int && ValueStack[ValueStack.Depth-1].exp.Type != TypeEnum.Int)
            {
                Error(LocationStack[LocationStack.Depth-1], "can only assign int to int");
                return;
            }
             if (type == TypeEnum.Bool && ValueStack[ValueStack.Depth-1].exp.Type != TypeEnum.Bool)
             {
                Error(LocationStack[LocationStack.Depth-1], "can only assign bool to bool");
                return;
            }
            
            Store(ValueStack[ValueStack.Depth-3].val, ValueStack[ValueStack.Depth-1].exp.Identifier, type);
            
            var temp = Compiler.NewTemp();
            Load(temp, ValueStack[ValueStack.Depth-3].val, type);
            CurrentSemanticValue.exp = new Exp(temp, type);
        }
#line default
        break;
      case 25: // exp -> Ident
#line 129 "Parser.y"
        {
            var typeNullable = GetIdentifierType(ValueStack[ValueStack.Depth-1].val, LocationStack[LocationStack.Depth-1]);
            if (!typeNullable.HasValue) { return; }
            
            var type = typeNullable.Value;
            var temp = Compiler.NewTemp();
            Load(temp, ValueStack[ValueStack.Depth-1].val, type);
            CurrentSemanticValue.exp = new Exp(temp, type);
        }
#line default
        break;
      case 27: // number -> IntNumber
#line 143 "Parser.y"
        {
            CurrentSemanticValue.exp = new Exp(ValueStack[ValueStack.Depth-1].val, TypeEnum.Int);
        }
#line default
        break;
      case 28: // number -> DoubleNumber
#line 147 "Parser.y"
        {
            CurrentSemanticValue.exp = new Exp(ValueStack[ValueStack.Depth-1].val, TypeEnum.Double);
        }
#line default
        break;
      case 29: // number -> True
#line 151 "Parser.y"
        {
            CurrentSemanticValue.exp = new Exp("1", TypeEnum.Bool);
        }
#line default
        break;
      case 30: // number -> False
#line 155 "Parser.y"
        {
            CurrentSemanticValue.exp = new Exp("0", TypeEnum.Bool);
        }
#line default
        break;
      case 31: // output_instruction -> Write, exp, Endline
#line 162 "Parser.y"
        {
            Print(ValueStack[ValueStack.Depth-2].exp.Identifier, ValueStack[ValueStack.Depth-2].exp.Type);
        }
#line default
        break;
      case 32: // output_instruction -> Write, exp, Comma, Hex, Endline
#line 166 "Parser.y"
        {
            if (ValueStack[ValueStack.Depth-4].exp.Type != TypeEnum.Int) 
            {
                Error(LocationStack[LocationStack.Depth-4], "variable must be int to be printed as hex");
                return;
            }
            
            PrintHex(ValueStack[ValueStack.Depth-4].exp.Identifier);
        }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 178 "Parser.y"

private TypeEnum identifiersType;

private void Error(LexLocation location, string text = "syntax error")
{
    Console.WriteLine(string.Format("Error ({0},{1}): {2}", location.StartLine, location.StartColumn, text));
    Compiler.Errors++;
}

private void Declare(string identifier, TypeEnum type, LexLocation location)
{
    if (Compiler.Identifiers.ContainsKey(identifier))
    {
        Error(location, "variable already declared");
        return;
    }
    
    Compiler.Identifiers.Add(identifier, type);
    Alloca(identifier, type);
}

private TypeEnum? GetIdentifierType(string identifier, LexLocation location)
{
    if (!Compiler.Identifiers.ContainsKey(identifier))
    {
        Error(location, "undeclared variable");
    }
    
    return Compiler.Identifiers[identifier];
}

private void Load(string target, string source, TypeEnum type)
{
    Compiler.EmitCode("{0} = load {1}, {1}* {2}", target, type.LLVMType(), source);
}

private void Alloca(string identifier, TypeEnum type)
{
    Compiler.EmitCode("{0} = alloca {1}", identifier, type.LLVMType());
}

private void Store(string target, string source, TypeEnum type)
{
    Compiler.EmitCode("store {1} {0}, {1}* {2}", source, type.LLVMType(), target);
}

private void Print(string value, TypeEnum type)
{
    var length = type == TypeEnum.Double ? 5 : 4;
    Compiler.EmitCode("call i32 (i8*, ...) @printf(i8* bitcast ([{1} x i8]* @{0} to i8*), {0} {2})", 
        type.LLVMType(), length, value);
}

private void PrintHex(string value)
{
    Compiler.EmitCode("call i32 (i8*, ...) @printf(i8* bitcast ([6 x i8]* @hex to i8*), i32 {0})",value);
}

public Parser(Scanner scanner) : base(scanner) { }
#line default
}
}
