// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  DESKTOP-4T5HHDR
// DateTime: 2021-06-16 19:21:47
// UserName: Molom
// Input file <Parser.y - 2021-06-16 19:09:28>

// options: lines diagnose & report gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace MiniCompiler
{
public enum Tokens {error=2,EOF=3,Program=4,If=5,Else=6,
    While=7,Read=8,Write=9,Return=10,Int=11,Double=12,
    Bool=13,True=14,False=15,Hex=16,Assign=17,Or=18,
    And=19,BitOr=20,BitAnd=21,Equal=22,NotEqual=23,Less=24,
    LessEqual=25,Greater=26,GreaterEqual=27,Plus=28,Minus=29,Multiply=30,
    Divide=31,Negate=32,BitNegate=33,OpenPar=34,ClosePar=35,OpenBlock=36,
    CloseBlock=37,Comma=38,Endline=39,Eof=40,Error=41,Ident=42,
    IntNumber=43,DoubleNumber=44,String=45};

public struct ValueType
#line 3 "Parser.y"
       {
    public string val;
    public TypeEnum type;
    public SyntaxTree tree;
    public List<SyntaxTree> list;
    public LogicalExpression.Operation logicalOperation;
    public RelationalExpression.Operation relationalOperation;
    public ArithmeticExpression.Operation arithmeticOperation;
    public BinaryExpression.Operation binaryOperation;
    public UnaryExpression.Operation unaryOperation;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[82];
  private static State[] states = new State[123];
  private static string[] nonTerms = new string[] {
      "programContent", "declaration", "instruction", "output_instruction", "input_instruction", 
      "block_instruction", "conditional_instruction", "loop_instruction", "exp", 
      "number", "logical", "exp_rest", "relational", "additive", "multiplicative", 
      "binary", "unary", "program", "type", "identifiers", "instructions", "declarations", 
      "logical_op", "relational_op", "additive_op", "multiplicative_op", "binary_op", 
      "unary_op", "start", "$accept", };

  static Parser() {
    states[0] = new State(new int[]{4,5,2,120,40,122},new int[]{-29,1,-18,3});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{40,4});
    states[4] = new State(-2);
    states[5] = new State(new int[]{36,6});
    states[6] = new State(new int[]{11,115,12,116,13,117,9,13,8,74,36,81,5,85,7,93,42,21,29,37,32,38,33,39,34,40,43,66,44,67,14,68,15,69,10,100,2,102,40,105,37,-9},new int[]{-1,7,-22,9,-2,118,-19,109,-21,119,-3,107,-4,12,-5,73,-6,80,-7,84,-8,92,-9,98,-11,24,-13,47,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[7] = new State(new int[]{37,8});
    states[8] = new State(-5);
    states[9] = new State(new int[]{9,13,8,74,36,81,5,85,7,93,42,21,29,37,32,38,33,39,34,40,43,66,44,67,14,68,15,69,10,100,2,102,40,105,11,115,12,116,13,117,37,-7},new int[]{-21,10,-2,108,-3,107,-4,12,-5,73,-6,80,-7,84,-8,92,-9,98,-11,24,-13,47,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65,-19,109});
    states[10] = new State(new int[]{9,13,8,74,36,81,5,85,7,93,42,21,29,37,32,38,33,39,34,40,43,66,44,67,14,68,15,69,10,100,2,102,40,105,37,-6},new int[]{-3,11,-4,12,-5,73,-6,80,-7,84,-8,92,-9,98,-11,24,-13,47,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[11] = new State(-19);
    states[12] = new State(-21);
    states[13] = new State(new int[]{45,19,42,21,29,37,32,38,33,39,34,40,43,66,44,67,14,68,15,69},new int[]{-9,14,-11,24,-13,47,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[14] = new State(new int[]{39,15,38,16});
    states[15] = new State(-77);
    states[16] = new State(new int[]{16,17});
    states[17] = new State(new int[]{39,18});
    states[18] = new State(-78);
    states[19] = new State(new int[]{39,20});
    states[20] = new State(-79);
    states[21] = new State(new int[]{17,22,21,-70,20,-70,30,-70,31,-70,28,-70,29,-70,22,-70,23,-70,24,-70,25,-70,26,-70,27,-70,19,-70,18,-70,39,-70,9,-70,8,-70,36,-70,5,-70,7,-70,42,-70,32,-70,33,-70,34,-70,43,-70,44,-70,14,-70,15,-70,10,-70,2,-70,40,-70,37,-70,38,-70,35,-70,6,-70});
    states[22] = new State(new int[]{42,21,29,37,32,38,33,39,34,40,43,66,44,67,14,68,15,69},new int[]{-9,23,-11,24,-13,47,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[23] = new State(-37);
    states[24] = new State(new int[]{19,71,18,72,39,-38,9,-38,8,-38,36,-38,5,-38,7,-38,42,-38,29,-38,32,-38,33,-38,34,-38,43,-38,44,-38,14,-38,15,-38,10,-38,2,-38,40,-38,37,-38,38,-38,35,-38,6,-38},new int[]{-23,25});
    states[25] = new State(new int[]{29,37,32,38,33,39,34,40,42,70,43,66,44,67,14,68,15,69},new int[]{-13,26,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[26] = new State(new int[]{22,48,23,49,24,50,25,51,26,52,27,53,19,-39,18,-39,39,-39,9,-39,8,-39,36,-39,5,-39,7,-39,42,-39,29,-39,32,-39,33,-39,34,-39,43,-39,44,-39,14,-39,15,-39,10,-39,2,-39,40,-39,37,-39,38,-39,35,-39,6,-39},new int[]{-24,27});
    states[27] = new State(new int[]{29,37,32,38,33,39,34,40,42,70,43,66,44,67,14,68,15,69},new int[]{-14,28,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[28] = new State(new int[]{28,55,29,56,22,-43,23,-43,24,-43,25,-43,26,-43,27,-43,19,-43,18,-43,39,-43,9,-43,8,-43,36,-43,5,-43,7,-43,42,-43,32,-43,33,-43,34,-43,43,-43,44,-43,14,-43,15,-43,10,-43,2,-43,40,-43,37,-43,38,-43,35,-43,6,-43},new int[]{-25,29});
    states[29] = new State(new int[]{29,37,32,38,33,39,34,40,42,70,43,66,44,67,14,68,15,69},new int[]{-15,30,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[30] = new State(new int[]{30,58,31,59,28,-51,29,-51,22,-51,23,-51,24,-51,25,-51,26,-51,27,-51,19,-51,18,-51,39,-51,9,-51,8,-51,36,-51,5,-51,7,-51,42,-51,32,-51,33,-51,34,-51,43,-51,44,-51,14,-51,15,-51,10,-51,2,-51,40,-51,37,-51,38,-51,35,-51,6,-51},new int[]{-26,31});
    states[31] = new State(new int[]{29,37,32,38,33,39,34,40,42,70,43,66,44,67,14,68,15,69},new int[]{-16,32,-17,63,-28,35,-12,64,-10,65});
    states[32] = new State(new int[]{21,61,20,62,30,-55,31,-55,28,-55,29,-55,22,-55,23,-55,24,-55,25,-55,26,-55,27,-55,19,-55,18,-55,39,-55,9,-55,8,-55,36,-55,5,-55,7,-55,42,-55,32,-55,33,-55,34,-55,43,-55,44,-55,14,-55,15,-55,10,-55,2,-55,40,-55,37,-55,38,-55,35,-55,6,-55},new int[]{-27,33});
    states[33] = new State(new int[]{29,37,32,38,33,39,34,40,42,70,43,66,44,67,14,68,15,69},new int[]{-17,34,-28,35,-12,64,-10,65});
    states[34] = new State(-59);
    states[35] = new State(new int[]{29,37,32,38,33,39,34,40,42,70,43,66,44,67,14,68,15,69},new int[]{-17,36,-28,35,-12,64,-10,65});
    states[36] = new State(-63);
    states[37] = new State(-65);
    states[38] = new State(-66);
    states[39] = new State(-67);
    states[40] = new State(new int[]{11,41,12,43,42,21,29,37,32,38,33,39,34,40,43,66,44,67,14,68,15,69},new int[]{-9,45,-11,24,-13,47,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[41] = new State(new int[]{35,42});
    states[42] = new State(-68);
    states[43] = new State(new int[]{35,44});
    states[44] = new State(-69);
    states[45] = new State(new int[]{35,46});
    states[46] = new State(-71);
    states[47] = new State(new int[]{22,48,23,49,24,50,25,51,26,52,27,53,19,-40,18,-40,39,-40,9,-40,8,-40,36,-40,5,-40,7,-40,42,-40,29,-40,32,-40,33,-40,34,-40,43,-40,44,-40,14,-40,15,-40,10,-40,2,-40,40,-40,37,-40,38,-40,35,-40,6,-40},new int[]{-24,27});
    states[48] = new State(-45);
    states[49] = new State(-46);
    states[50] = new State(-47);
    states[51] = new State(-48);
    states[52] = new State(-49);
    states[53] = new State(-50);
    states[54] = new State(new int[]{28,55,29,56,22,-44,23,-44,24,-44,25,-44,26,-44,27,-44,19,-44,18,-44,39,-44,9,-44,8,-44,36,-44,5,-44,7,-44,42,-44,32,-44,33,-44,34,-44,43,-44,44,-44,14,-44,15,-44,10,-44,2,-44,40,-44,37,-44,38,-44,35,-44,6,-44},new int[]{-25,29});
    states[55] = new State(-53);
    states[56] = new State(-54);
    states[57] = new State(new int[]{30,58,31,59,28,-52,29,-52,22,-52,23,-52,24,-52,25,-52,26,-52,27,-52,19,-52,18,-52,39,-52,9,-52,8,-52,36,-52,5,-52,7,-52,42,-52,32,-52,33,-52,34,-52,43,-52,44,-52,14,-52,15,-52,10,-52,2,-52,40,-52,37,-52,38,-52,35,-52,6,-52},new int[]{-26,31});
    states[58] = new State(-57);
    states[59] = new State(-58);
    states[60] = new State(new int[]{21,61,20,62,30,-56,31,-56,28,-56,29,-56,22,-56,23,-56,24,-56,25,-56,26,-56,27,-56,19,-56,18,-56,39,-56,9,-56,8,-56,36,-56,5,-56,7,-56,42,-56,32,-56,33,-56,34,-56,43,-56,44,-56,14,-56,15,-56,10,-56,2,-56,40,-56,37,-56,38,-56,35,-56,6,-56},new int[]{-27,33});
    states[61] = new State(-61);
    states[62] = new State(-62);
    states[63] = new State(-60);
    states[64] = new State(-64);
    states[65] = new State(-72);
    states[66] = new State(-73);
    states[67] = new State(-74);
    states[68] = new State(-75);
    states[69] = new State(-76);
    states[70] = new State(-70);
    states[71] = new State(-41);
    states[72] = new State(-42);
    states[73] = new State(-22);
    states[74] = new State(new int[]{42,75});
    states[75] = new State(new int[]{39,76,38,77});
    states[76] = new State(-80);
    states[77] = new State(new int[]{16,78});
    states[78] = new State(new int[]{39,79});
    states[79] = new State(-81);
    states[80] = new State(-23);
    states[81] = new State(new int[]{37,106,9,13,8,74,36,81,5,85,7,93,42,21,29,37,32,38,33,39,34,40,43,66,44,67,14,68,15,69,10,100,2,102,40,105},new int[]{-21,82,-3,107,-4,12,-5,73,-6,80,-7,84,-8,92,-9,98,-11,24,-13,47,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[82] = new State(new int[]{37,83,9,13,8,74,36,81,5,85,7,93,42,21,29,37,32,38,33,39,34,40,43,66,44,67,14,68,15,69,10,100,2,102,40,105},new int[]{-3,11,-4,12,-5,73,-6,80,-7,84,-8,92,-9,98,-11,24,-13,47,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[83] = new State(-35);
    states[84] = new State(-24);
    states[85] = new State(new int[]{34,86});
    states[86] = new State(new int[]{42,21,29,37,32,38,33,39,34,40,43,66,44,67,14,68,15,69},new int[]{-9,87,-11,24,-13,47,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[87] = new State(new int[]{35,88});
    states[88] = new State(new int[]{9,13,8,74,36,81,5,85,7,93,42,21,29,37,32,38,33,39,34,40,43,66,44,67,14,68,15,69,10,100,2,102,40,105},new int[]{-3,89,-4,12,-5,73,-6,80,-7,84,-8,92,-9,98,-11,24,-13,47,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[89] = new State(new int[]{6,90,9,-32,8,-32,36,-32,5,-32,7,-32,42,-32,29,-32,32,-32,33,-32,34,-32,43,-32,44,-32,14,-32,15,-32,10,-32,2,-32,40,-32,37,-32});
    states[90] = new State(new int[]{9,13,8,74,36,81,5,85,7,93,42,21,29,37,32,38,33,39,34,40,43,66,44,67,14,68,15,69,10,100,2,102,40,105},new int[]{-3,91,-4,12,-5,73,-6,80,-7,84,-8,92,-9,98,-11,24,-13,47,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[91] = new State(-33);
    states[92] = new State(-25);
    states[93] = new State(new int[]{34,94});
    states[94] = new State(new int[]{42,21,29,37,32,38,33,39,34,40,43,66,44,67,14,68,15,69},new int[]{-9,95,-11,24,-13,47,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[95] = new State(new int[]{35,96});
    states[96] = new State(new int[]{9,13,8,74,36,81,5,85,7,93,42,21,29,37,32,38,33,39,34,40,43,66,44,67,14,68,15,69,10,100,2,102,40,105},new int[]{-3,97,-4,12,-5,73,-6,80,-7,84,-8,92,-9,98,-11,24,-13,47,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[97] = new State(-34);
    states[98] = new State(new int[]{39,99,9,-28,8,-28,36,-28,5,-28,7,-28,42,-28,29,-28,32,-28,33,-28,34,-28,43,-28,44,-28,14,-28,15,-28,10,-28,2,-28,40,-28,37,-28,6,-28});
    states[99] = new State(-26);
    states[100] = new State(new int[]{39,101});
    states[101] = new State(-27);
    states[102] = new State(new int[]{39,103,40,104});
    states[103] = new State(-29);
    states[104] = new State(-30);
    states[105] = new State(-31);
    states[106] = new State(-36);
    states[107] = new State(-20);
    states[108] = new State(-10);
    states[109] = new State(new int[]{42,114},new int[]{-20,110});
    states[110] = new State(new int[]{39,111,38,112,9,-13,8,-13,36,-13,5,-13,7,-13,42,-13,29,-13,32,-13,33,-13,34,-13,43,-13,44,-13,14,-13,15,-13,10,-13,2,-13,40,-13,11,-13,12,-13,13,-13,37,-13});
    states[111] = new State(-12);
    states[112] = new State(new int[]{42,113});
    states[113] = new State(-17);
    states[114] = new State(-18);
    states[115] = new State(-14);
    states[116] = new State(-15);
    states[117] = new State(-16);
    states[118] = new State(-11);
    states[119] = new State(new int[]{9,13,8,74,36,81,5,85,7,93,42,21,29,37,32,38,33,39,34,40,43,66,44,67,14,68,15,69,10,100,2,102,40,105,37,-8},new int[]{-3,11,-4,12,-5,73,-6,80,-7,84,-8,92,-9,98,-11,24,-13,47,-14,54,-15,57,-16,60,-17,63,-28,35,-12,64,-10,65});
    states[120] = new State(new int[]{40,121});
    states[121] = new State(-3);
    states[122] = new State(-4);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-30, new int[]{-29,3});
    rules[2] = new Rule(-29, new int[]{-18,40});
    rules[3] = new Rule(-29, new int[]{2,40});
    rules[4] = new Rule(-29, new int[]{40});
    rules[5] = new Rule(-18, new int[]{4,36,-1,37});
    rules[6] = new Rule(-1, new int[]{-22,-21});
    rules[7] = new Rule(-1, new int[]{-22});
    rules[8] = new Rule(-1, new int[]{-21});
    rules[9] = new Rule(-1, new int[]{});
    rules[10] = new Rule(-22, new int[]{-22,-2});
    rules[11] = new Rule(-22, new int[]{-2});
    rules[12] = new Rule(-2, new int[]{-19,-20,39});
    rules[13] = new Rule(-2, new int[]{-19,-20});
    rules[14] = new Rule(-19, new int[]{11});
    rules[15] = new Rule(-19, new int[]{12});
    rules[16] = new Rule(-19, new int[]{13});
    rules[17] = new Rule(-20, new int[]{-20,38,42});
    rules[18] = new Rule(-20, new int[]{42});
    rules[19] = new Rule(-21, new int[]{-21,-3});
    rules[20] = new Rule(-21, new int[]{-3});
    rules[21] = new Rule(-3, new int[]{-4});
    rules[22] = new Rule(-3, new int[]{-5});
    rules[23] = new Rule(-3, new int[]{-6});
    rules[24] = new Rule(-3, new int[]{-7});
    rules[25] = new Rule(-3, new int[]{-8});
    rules[26] = new Rule(-3, new int[]{-9,39});
    rules[27] = new Rule(-3, new int[]{10,39});
    rules[28] = new Rule(-3, new int[]{-9});
    rules[29] = new Rule(-3, new int[]{2,39});
    rules[30] = new Rule(-3, new int[]{2,40});
    rules[31] = new Rule(-3, new int[]{40});
    rules[32] = new Rule(-7, new int[]{5,34,-9,35,-3});
    rules[33] = new Rule(-7, new int[]{5,34,-9,35,-3,6,-3});
    rules[34] = new Rule(-8, new int[]{7,34,-9,35,-3});
    rules[35] = new Rule(-6, new int[]{36,-21,37});
    rules[36] = new Rule(-6, new int[]{36,37});
    rules[37] = new Rule(-9, new int[]{42,17,-9});
    rules[38] = new Rule(-9, new int[]{-11});
    rules[39] = new Rule(-11, new int[]{-11,-23,-13});
    rules[40] = new Rule(-11, new int[]{-13});
    rules[41] = new Rule(-23, new int[]{19});
    rules[42] = new Rule(-23, new int[]{18});
    rules[43] = new Rule(-13, new int[]{-13,-24,-14});
    rules[44] = new Rule(-13, new int[]{-14});
    rules[45] = new Rule(-24, new int[]{22});
    rules[46] = new Rule(-24, new int[]{23});
    rules[47] = new Rule(-24, new int[]{24});
    rules[48] = new Rule(-24, new int[]{25});
    rules[49] = new Rule(-24, new int[]{26});
    rules[50] = new Rule(-24, new int[]{27});
    rules[51] = new Rule(-14, new int[]{-14,-25,-15});
    rules[52] = new Rule(-14, new int[]{-15});
    rules[53] = new Rule(-25, new int[]{28});
    rules[54] = new Rule(-25, new int[]{29});
    rules[55] = new Rule(-15, new int[]{-15,-26,-16});
    rules[56] = new Rule(-15, new int[]{-16});
    rules[57] = new Rule(-26, new int[]{30});
    rules[58] = new Rule(-26, new int[]{31});
    rules[59] = new Rule(-16, new int[]{-16,-27,-17});
    rules[60] = new Rule(-16, new int[]{-17});
    rules[61] = new Rule(-27, new int[]{21});
    rules[62] = new Rule(-27, new int[]{20});
    rules[63] = new Rule(-17, new int[]{-28,-17});
    rules[64] = new Rule(-17, new int[]{-12});
    rules[65] = new Rule(-28, new int[]{29});
    rules[66] = new Rule(-28, new int[]{32});
    rules[67] = new Rule(-28, new int[]{33});
    rules[68] = new Rule(-28, new int[]{34,11,35});
    rules[69] = new Rule(-28, new int[]{34,12,35});
    rules[70] = new Rule(-12, new int[]{42});
    rules[71] = new Rule(-12, new int[]{34,-9,35});
    rules[72] = new Rule(-12, new int[]{-10});
    rules[73] = new Rule(-10, new int[]{43});
    rules[74] = new Rule(-10, new int[]{44});
    rules[75] = new Rule(-10, new int[]{14});
    rules[76] = new Rule(-10, new int[]{15});
    rules[77] = new Rule(-4, new int[]{9,-9,39});
    rules[78] = new Rule(-4, new int[]{9,-9,38,16,39});
    rules[79] = new Rule(-4, new int[]{9,45,39});
    rules[80] = new Rule(-5, new int[]{8,42,39});
    rules[81] = new Rule(-5, new int[]{8,42,38,16,39});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // start -> program, Eof
#line 34 "Parser.y"
        {
            YYAccept();
        }
#line default
        break;
      case 3: // start -> error, Eof
#line 38 "Parser.y"
        {
            Compiler.Error(LocationStack[LocationStack.Depth-2]);
            yyerrok();
            YYAccept();
        }
#line default
        break;
      case 4: // start -> Eof
#line 44 "Parser.y"
        {
            Compiler.Error(LocationStack[LocationStack.Depth-1], "syntax error - unexpected end of file");
            YYAccept();
        }
#line default
        break;
      case 5: // program -> Program, OpenBlock, programContent, CloseBlock
#line 52 "Parser.y"
        { Compiler.Program = new Program(ValueStack[ValueStack.Depth-2].tree, CurrentLocationSpan); }
#line default
        break;
      case 6: // programContent -> declarations, instructions
#line 57 "Parser.y"
        { CurrentSemanticValue.tree = new ProgramContent(ValueStack[ValueStack.Depth-2].list, ValueStack[ValueStack.Depth-1].list, CurrentLocationSpan); }
#line default
        break;
      case 7: // programContent -> declarations
#line 59 "Parser.y"
        { CurrentSemanticValue.tree = new ProgramContent(ValueStack[ValueStack.Depth-1].list, null, CurrentLocationSpan); }
#line default
        break;
      case 8: // programContent -> instructions
#line 61 "Parser.y"
        { CurrentSemanticValue.tree = new ProgramContent(null, ValueStack[ValueStack.Depth-1].list, CurrentLocationSpan); }
#line default
        break;
      case 9: // programContent -> /* empty */
#line 63 "Parser.y"
        { CurrentSemanticValue.tree = new ProgramContent(null, null, CurrentLocationSpan); }
#line default
        break;
      case 10: // declarations -> declarations, declaration
#line 68 "Parser.y"
        {
            ValueStack[ValueStack.Depth-2].list.Add(ValueStack[ValueStack.Depth-1].tree);
            CurrentSemanticValue.list = ValueStack[ValueStack.Depth-2].list;
        }
#line default
        break;
      case 11: // declarations -> declaration
#line 73 "Parser.y"
        {
            CurrentSemanticValue.list = new List<SyntaxTree>();
            CurrentSemanticValue.list.Add(ValueStack[ValueStack.Depth-1].tree);
        }
#line default
        break;
      case 12: // declaration -> type, identifiers, Endline
#line 81 "Parser.y"
        { CurrentSemanticValue.tree = new Declaration(ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-2].list, CurrentLocationSpan); }
#line default
        break;
      case 13: // declaration -> type, identifiers
#line 83 "Parser.y"
        {
            Compiler.Error(LocationStack[LocationStack.Depth-2], "missing semicolon");
            CurrentSemanticValue.tree = null;
        }
#line default
        break;
      case 14: // type -> Int
#line 91 "Parser.y"
        { CurrentSemanticValue.type = TypeEnum.Int; }
#line default
        break;
      case 15: // type -> Double
#line 93 "Parser.y"
        { CurrentSemanticValue.type = TypeEnum.Double; }
#line default
        break;
      case 16: // type -> Bool
#line 95 "Parser.y"
        { CurrentSemanticValue.type = TypeEnum.Bool; }
#line default
        break;
      case 17: // identifiers -> identifiers, Comma, Ident
#line 100 "Parser.y"
        {
            ValueStack[ValueStack.Depth-3].list.Add(new Identifier(ValueStack[ValueStack.Depth-1].val, LocationStack[LocationStack.Depth-1]));
            CurrentSemanticValue.list = ValueStack[ValueStack.Depth-3].list;
        }
#line default
        break;
      case 18: // identifiers -> Ident
#line 105 "Parser.y"
        {
            CurrentSemanticValue.list = new List<SyntaxTree>();
            CurrentSemanticValue.list.Add(new Identifier(ValueStack[ValueStack.Depth-1].val, LocationStack[LocationStack.Depth-1]));
        }
#line default
        break;
      case 19: // instructions -> instructions, instruction
#line 113 "Parser.y"
        {
            ValueStack[ValueStack.Depth-2].list.Add(ValueStack[ValueStack.Depth-1].tree);
            CurrentSemanticValue.list = ValueStack[ValueStack.Depth-2].list;
        }
#line default
        break;
      case 20: // instructions -> instruction
#line 118 "Parser.y"
        {
            CurrentSemanticValue.list = new List<SyntaxTree>();
            CurrentSemanticValue.list.Add(ValueStack[ValueStack.Depth-1].tree);
        }
#line default
        break;
      case 27: // instruction -> Return, Endline
#line 132 "Parser.y"
        { CurrentSemanticValue.tree = new ReturnInstruction(LocationStack[LocationStack.Depth-2]); }
#line default
        break;
      case 28: // instruction -> exp
#line 134 "Parser.y"
        {
            Compiler.Error(LocationStack[LocationStack.Depth-1], "missing semicolon");
            CurrentSemanticValue.tree = null;
        }
#line default
        break;
      case 29: // instruction -> error, Endline
#line 139 "Parser.y"
        {
            Compiler.Error(LocationStack[LocationStack.Depth-2]);
            CurrentSemanticValue.tree = null;
            yyerrok();
        }
#line default
        break;
      case 30: // instruction -> error, Eof
#line 145 "Parser.y"
        {
            Compiler.Error(LocationStack[LocationStack.Depth-2]);
            yyerrok();
            YYAccept();
        }
#line default
        break;
      case 31: // instruction -> Eof
#line 151 "Parser.y"
        {
            Compiler.Error(LocationStack[LocationStack.Depth-1], "syntax error - unexpected end of file");
            YYAbort();
        }
#line default
        break;
      case 32: // conditional_instruction -> If, OpenPar, exp, ClosePar, instruction
#line 159 "Parser.y"
        { CurrentSemanticValue.tree = new ConditionalInstruction(ValueStack[ValueStack.Depth-3].tree, ValueStack[ValueStack.Depth-1].tree, CurrentLocationSpan); }
#line default
        break;
      case 33: // conditional_instruction -> If, OpenPar, exp, ClosePar, instruction, Else, 
               //                            instruction
#line 161 "Parser.y"
        { CurrentSemanticValue.tree = new ConditionalInstruction(ValueStack[ValueStack.Depth-5].tree, ValueStack[ValueStack.Depth-3].tree, ValueStack[ValueStack.Depth-1].tree, CurrentLocationSpan); }
#line default
        break;
      case 34: // loop_instruction -> While, OpenPar, exp, ClosePar, instruction
#line 166 "Parser.y"
        { CurrentSemanticValue.tree = new LoopInstruction(ValueStack[ValueStack.Depth-3].tree, ValueStack[ValueStack.Depth-1].tree, CurrentLocationSpan); }
#line default
        break;
      case 35: // block_instruction -> OpenBlock, instructions, CloseBlock
#line 171 "Parser.y"
        { CurrentSemanticValue.tree = new BlockInstruction(ValueStack[ValueStack.Depth-2].list, CurrentLocationSpan); }
#line default
        break;
      case 36: // block_instruction -> OpenBlock, CloseBlock
#line 173 "Parser.y"
        { CurrentSemanticValue.tree = null; }
#line default
        break;
      case 37: // exp -> Ident, Assign, exp
#line 178 "Parser.y"
        { CurrentSemanticValue.tree = new AssignmentExpression(ValueStack[ValueStack.Depth-3].val, ValueStack[ValueStack.Depth-1].tree, CurrentLocationSpan); }
#line default
        break;
      case 39: // logical -> logical, logical_op, relational
#line 184 "Parser.y"
        { CurrentSemanticValue.tree = new LogicalExpression(ValueStack[ValueStack.Depth-3].tree, ValueStack[ValueStack.Depth-1].tree, ValueStack[ValueStack.Depth-2].logicalOperation, CurrentLocationSpan); }
#line default
        break;
      case 41: // logical_op -> And
#line 190 "Parser.y"
        { CurrentSemanticValue.logicalOperation = LogicalExpression.Operation.And; }
#line default
        break;
      case 42: // logical_op -> Or
#line 192 "Parser.y"
        { CurrentSemanticValue.logicalOperation = LogicalExpression.Operation.Or; }
#line default
        break;
      case 43: // relational -> relational, relational_op, additive
#line 197 "Parser.y"
        { CurrentSemanticValue.tree = new RelationalExpression(ValueStack[ValueStack.Depth-3].tree, ValueStack[ValueStack.Depth-1].tree, ValueStack[ValueStack.Depth-2].relationalOperation, CurrentLocationSpan); }
#line default
        break;
      case 45: // relational_op -> Equal
#line 203 "Parser.y"
        { CurrentSemanticValue.relationalOperation = RelationalExpression.Operation.Equal; }
#line default
        break;
      case 46: // relational_op -> NotEqual
#line 205 "Parser.y"
        { CurrentSemanticValue.relationalOperation = RelationalExpression.Operation.NotEqual; }
#line default
        break;
      case 47: // relational_op -> Less
#line 207 "Parser.y"
        { CurrentSemanticValue.relationalOperation = RelationalExpression.Operation.Less; }
#line default
        break;
      case 48: // relational_op -> LessEqual
#line 209 "Parser.y"
        { CurrentSemanticValue.relationalOperation = RelationalExpression.Operation.LessEqual; }
#line default
        break;
      case 49: // relational_op -> Greater
#line 211 "Parser.y"
        { CurrentSemanticValue.relationalOperation = RelationalExpression.Operation.Greater; }
#line default
        break;
      case 50: // relational_op -> GreaterEqual
#line 213 "Parser.y"
        { CurrentSemanticValue.relationalOperation = RelationalExpression.Operation.GreaterEqual; }
#line default
        break;
      case 51: // additive -> additive, additive_op, multiplicative
#line 218 "Parser.y"
        { CurrentSemanticValue.tree = new ArithmeticExpression(ValueStack[ValueStack.Depth-3].tree, ValueStack[ValueStack.Depth-1].tree, ValueStack[ValueStack.Depth-2].arithmeticOperation, CurrentLocationSpan); }
#line default
        break;
      case 53: // additive_op -> Plus
#line 224 "Parser.y"
        { CurrentSemanticValue.arithmeticOperation = ArithmeticExpression.Operation.Addition; }
#line default
        break;
      case 54: // additive_op -> Minus
#line 226 "Parser.y"
        { CurrentSemanticValue.arithmeticOperation = ArithmeticExpression.Operation.Subtraction; }
#line default
        break;
      case 55: // multiplicative -> multiplicative, multiplicative_op, binary
#line 231 "Parser.y"
        { CurrentSemanticValue.tree = new ArithmeticExpression(ValueStack[ValueStack.Depth-3].tree, ValueStack[ValueStack.Depth-1].tree, ValueStack[ValueStack.Depth-2].arithmeticOperation, CurrentLocationSpan); }
#line default
        break;
      case 57: // multiplicative_op -> Multiply
#line 237 "Parser.y"
        { CurrentSemanticValue.arithmeticOperation = ArithmeticExpression.Operation.Multiplication; }
#line default
        break;
      case 58: // multiplicative_op -> Divide
#line 239 "Parser.y"
        { CurrentSemanticValue.arithmeticOperation = ArithmeticExpression.Operation.Division; }
#line default
        break;
      case 59: // binary -> binary, binary_op, unary
#line 244 "Parser.y"
        { CurrentSemanticValue.tree = new BinaryExpression(ValueStack[ValueStack.Depth-3].tree, ValueStack[ValueStack.Depth-1].tree, ValueStack[ValueStack.Depth-2].binaryOperation, CurrentLocationSpan); }
#line default
        break;
      case 61: // binary_op -> BitAnd
#line 250 "Parser.y"
        { CurrentSemanticValue.binaryOperation = BinaryExpression.Operation.And; }
#line default
        break;
      case 62: // binary_op -> BitOr
#line 252 "Parser.y"
        { CurrentSemanticValue.binaryOperation = BinaryExpression.Operation.Or; }
#line default
        break;
      case 63: // unary -> unary_op, unary
#line 257 "Parser.y"
        { CurrentSemanticValue.tree = new UnaryExpression(ValueStack[ValueStack.Depth-1].tree, ValueStack[ValueStack.Depth-2].unaryOperation, CurrentLocationSpan); }
#line default
        break;
      case 65: // unary_op -> Minus
#line 263 "Parser.y"
        { CurrentSemanticValue.unaryOperation = UnaryExpression.Operation.Minus; }
#line default
        break;
      case 66: // unary_op -> Negate
#line 265 "Parser.y"
        { CurrentSemanticValue.unaryOperation = UnaryExpression.Operation.Negate; }
#line default
        break;
      case 67: // unary_op -> BitNegate
#line 267 "Parser.y"
        { CurrentSemanticValue.unaryOperation = UnaryExpression.Operation.BitNegate; }
#line default
        break;
      case 68: // unary_op -> OpenPar, Int, ClosePar
#line 269 "Parser.y"
        { CurrentSemanticValue.unaryOperation = UnaryExpression.Operation.CastInt; }
#line default
        break;
      case 69: // unary_op -> OpenPar, Double, ClosePar
#line 271 "Parser.y"
        { CurrentSemanticValue.unaryOperation = UnaryExpression.Operation.CastDouble; }
#line default
        break;
      case 70: // exp_rest -> Ident
#line 276 "Parser.y"
        { CurrentSemanticValue.tree = new IdentifierExpression(ValueStack[ValueStack.Depth-1].val, CurrentLocationSpan); }
#line default
        break;
      case 71: // exp_rest -> OpenPar, exp, ClosePar
#line 278 "Parser.y"
        { CurrentSemanticValue.tree = ValueStack[ValueStack.Depth-2].tree; }
#line default
        break;
      case 73: // number -> IntNumber
#line 284 "Parser.y"
        { CurrentSemanticValue.tree = new NumberExpression(ValueStack[ValueStack.Depth-1].val, TypeEnum.Int, CurrentLocationSpan); }
#line default
        break;
      case 74: // number -> DoubleNumber
#line 286 "Parser.y"
        { CurrentSemanticValue.tree = new NumberExpression(ValueStack[ValueStack.Depth-1].val, TypeEnum.Double, CurrentLocationSpan); }
#line default
        break;
      case 75: // number -> True
#line 288 "Parser.y"
        { CurrentSemanticValue.tree = new NumberExpression("1", TypeEnum.Bool, CurrentLocationSpan); }
#line default
        break;
      case 76: // number -> False
#line 290 "Parser.y"
        { CurrentSemanticValue.tree = new NumberExpression("0", TypeEnum.Bool, CurrentLocationSpan); }
#line default
        break;
      case 77: // output_instruction -> Write, exp, Endline
#line 295 "Parser.y"
        { CurrentSemanticValue.tree = new OutputInstruction(ValueStack[ValueStack.Depth-2].tree, OutputInstruction.Flag.None, CurrentLocationSpan); }
#line default
        break;
      case 78: // output_instruction -> Write, exp, Comma, Hex, Endline
#line 297 "Parser.y"
        { CurrentSemanticValue.tree = new OutputInstruction(ValueStack[ValueStack.Depth-4].tree, OutputInstruction.Flag.Hex, CurrentLocationSpan); }
#line default
        break;
      case 79: // output_instruction -> Write, String, Endline
#line 299 "Parser.y"
        { CurrentSemanticValue.tree = new OutputInstruction(ValueStack[ValueStack.Depth-2].val, CurrentLocationSpan); }
#line default
        break;
      case 80: // input_instruction -> Read, Ident, Endline
#line 304 "Parser.y"
        { CurrentSemanticValue.tree = new InputInstruction(new Identifier(ValueStack[ValueStack.Depth-2].val, LocationStack[LocationStack.Depth-2]), false, CurrentLocationSpan); }
#line default
        break;
      case 81: // input_instruction -> Read, Ident, Comma, Hex, Endline
#line 306 "Parser.y"
        { CurrentSemanticValue.tree = new InputInstruction(new Identifier(ValueStack[ValueStack.Depth-4].val, LocationStack[LocationStack.Depth-4]), true, CurrentLocationSpan); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 310 "Parser.y"

public Parser(Scanner scanner) : base(scanner) { }
#line default
}
}
